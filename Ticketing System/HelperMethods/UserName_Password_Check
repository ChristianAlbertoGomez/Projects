    /**
     * Method implemented by Victor Herrera
     * To handle customer log in Errors
     * @param firstName user input
     * @param customerRepository provides instance of all customers
     * Method will take first name and compare it with
     * customer list to ensure input matches first name in list.
     *
     * /---------------------Notes ------------------------/
     * For Code Review Initially when user would enter first name program
     * Continues but after some review program takes any input and continues to function
     * This method was the first step to prevent this as it can lead to security issues.
     *
     * **/
    private static boolean firstNameCheck(String firstName,CustomerRepository customerRepository) {
        for(CustomerIterator iterator = customerRepository.getMethod(); iterator.hasNext();){
            Customer customer = iterator.next();
            if(customer.getFirstName().equals(firstName)){
                return customer.getFirstName().equals(firstName);
            }
        }
        return false;
    }
    /**
     * Method implemented by Victor Herrera
     * To handle customer log in Errors
     * @param firstName previos input that will be used in current function
     * @param lastName  user input
     * @param customerRepository provides instance of all customers
     * Method will take last name and compare it with
     * customer list to ensure input matches last name
     * first name will be carried over to ensure that last name is valid.
     *
     *
     * /---------------------Notes ------------------------/
     * For Code Review
     * Last Name Input when conducted Review would take any input and program would
     * Continue. This would be an issue when running further functions as program
     * Could resutl in error such as Ticket having bad names.
     *
     * **/
    private static boolean lastNameCheck(String firstName,String lastName,CustomerRepository customerRepository){
        for(CustomerIterator iterator = customerRepository.getMethod(); iterator.hasNext();){
            Customer customer = iterator.next();
            if(customer.getFirstName().equals(firstName) && customer.getLastName().equals(lastName)){
                return customer.getLastName().equals(lastName);
            }
        }

        return false;
    }
    /**
     * Method provided by Victor Herrera
     * @param firstName,lastName,userName user input.
     * method will take previous userInput and concatenate with userName input.
     * and compare that information pertains to the individual with previous input.
     * preventing a random user name that does not match to the individual.
     * **/
    private static boolean userNameCheck(String firstName,String lastName,String userName,CustomerRepository customerRepository){
        for(CustomerIterator iterator = customerRepository.getMethod(); iterator.hasNext();){
            Customer customer = iterator.next();
            if(customer.getFirstName().equals(firstName) && customer.getLastName().equals(lastName)&&customer.getUserName().equals(userName)){
                return customer.getUserName().equals(userName);
            }
        }
        return false;
    }
    /**
     * Method Provided by Victor Herrera
     * Method will take previous input from user up to current input
     * and compare information of user input to that of repository to
     * Ensure information is valid.
     * @param firstName previous user input
     * @param lastName  previous user input
     * @param userName  previous user input
     * @param password current user input.
     * @param customerRepository instance of customer repository.
     * **/
    private static boolean checkUserPassword(String firstName,String lastName,String userName,String password,CustomerRepository customerRepository){
        for(CustomerIterator iterator = customerRepository.getMethod(); iterator.hasNext();){
            Customer customer = iterator.next();
            if(customer.getFirstName().equals(firstName) && customer.getLastName().equals(lastName)&&customer.getUserName().equals(userName)&&customer.getPassword().equals(password)){
                return customer.getPassword().equals(password);
            }
        }
        return false;
    }
